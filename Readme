# Neuro v2 - Persistent Cognitive Agent & Platform

Neuro v2 is a full-stack, interactive cognitive agent platform. It features a modern web-based chatbot that simulates an evolving, AI-powered mind, with persistent memory, emotional intelligence, and a rich set of features for both users and developers. Neuro v2 now includes a robust backend, advanced frontend, and integration capabilities for real-world applications.

## ‚ú® Key Features

### Cognitive Agent & Chatbot

- **Persistent Memory:** Remembers all interactions, beliefs, and mood across browser sessions and server restarts.

- **Dual-Mode Operation:**
  - **Demo Mode:** Built-in, context-aware responses (no external API required).
  - **LLM-Connected Mode:** Connects to OpenAI GPT-4 via user API key for generative, dynamic conversations.

- **Evolving Personality:** Learns and adapts beliefs, mood, and conversational style based on ongoing dialogue.

- **Emotional Analysis:** Assigns and visualizes emotional scores to user input, influencing agent mood and responses.

- **Cognitive State Dashboard:** Real-time display of agent's mind, including mood, recent memories, and evolving beliefs.

- **Import/Export State:** Download or upload the agent's full cognitive state (JSON) for backup, sharing, or restoration.

- **Modern, Responsive UI:** Clean, mobile-friendly interface with typing indicator, timestamps, collapsible settings, and theme support.

### Full-Stack Platform

- **Backend API (Python/FastAPI):**
  - User authentication and session management
  - Persistent database for chat logs, user profiles, and agent state
  - RESTful endpoints for agent interaction, state management, and analytics

- **Frontend (React + TypeScript + Tailwind):**
  - Rich chat interface with file upload, voice features, message reactions, and shared conversations
  - Theme switching and accessibility options
  - Real-time updates and dashboard integration

- **Server Utilities (Node.js):**
  - Database connectivity and utility scripts

### Advanced Capabilities

- **Multi-User Support:** Each user has a unique agent state and secure login

- **File Uploads:** Attach files to conversations for context or memory

- **Voice Features:** Speech-to-text and text-to-speech integration

- **Message Reactions:** React to messages with emojis and feedback

- **Shared Conversations:** Share and view conversations with other users

- **Theme Provider:** Switch between light/dark modes and custom themes

- **Asset Management:** Upload and serve images, files, and other assets

## üß© Use Cases

- **Research & Experimentation:** Study cognitive agent behavior, memory, and adaptation in a controlled environment.
- **Education:** Teach concepts of AI, memory, emotion, and personality in classrooms or workshops.
- **Mental Health & Wellness:** Provide a safe, persistent conversational partner for journaling, mood tracking, or self-reflection.
- **Creative Writing & Storytelling:** Collaborate with the agent to generate stories, characters, or world-building ideas.
- **Customer Support & FAQ:** Deploy as a persistent, context-aware chatbot for user support and information retrieval.
- **Team Collaboration:** Share conversations, files, and ideas among team members with persistent context.
- **Personal Assistant:** Use as a memory-keeping, context-aware assistant for daily tasks and reminders.
- **Plugin Platform:** Extend with custom skills, analytics, or integrations for specialized domains.

## üöÄ How to Use

### Local Demo (Frontend Only)

1. Open `index.html` in any modern browser (Chrome, Firefox, Edge)

2. Start chatting immediately in Demo Mode

### Full Platform (Frontend + Backend)

1. Start the backend server (`backend/main.py`) with Python (see `pyproject.toml` for dependencies)

2. Start the frontend (React app in `frontend/`)

3. Access the full dashboard, login, and advanced features

### Connecting to GPT-4 (Optional)

- Click the settings icon (‚öôÔ∏è) in the chat UI

- Enter your OpenAI API key

- Click "Connect" to enable LLM-powered responses

### Managing Agent State

- Use settings panel to Export/Import agent state

- Reset memory to start fresh

## üõ†Ô∏è Technical Breakdown

### Backend (`backend/`)

- **Python (FastAPI):** Auth, database, API endpoints

- **Database:** Persistent storage for users, chat logs, agent state

### Frontend (`frontend/`)

- **React + TypeScript:** Main chat UI, dashboard, file upload, voice, reactions

- **Tailwind CSS:** Modern, responsive design

- **Vite:** Fast development/build tooling

### Server (`server/`)

- **Node.js:** Database utilities, server scripts

### Core Agent Logic

- **EnhancedCognitiveAgent:** Orchestrates perception, reflection, memory, adaptation

- **EnhancedLLMReflector:** Manages OpenAI API connection and response generation

- **MoodRegulator:** Tracks and adjusts agent mood

- **ThemeTracker:** Identifies and records key conversational themes

- **KnowledgeGraph:** Forms relationships between discussed concepts

- **Persistence:** Serializes agent state to JSON/localStorage/database

## üìÅ Project Structure

- `backend/` - Python FastAPI backend
- `frontend/` - React/TypeScript frontend
- `server/` - Node.js utilities
- `attached_assets/` - Uploaded files and assets
- `index.html` - Standalone demo

## üìö Documentation & Setup

- See `LOCAL_SETUP.md` for local installation and development
- See `replit.md` for Replit cloud setup
- See `Readme` for feature overview

## üßë‚Äçüíª Contributing

Pull requests and issues are welcome! See the frontend and backend folders for modular code and extension points.

## üèÅ Roadmap

- Multi-agent support
- Advanced analytics dashboard
- Plugin system for custom agent skills
- More LLM integrations

---

Neuro v2 is a next-generation cognitive agent platform for research, education, and creative applications. Try it out, extend it, and help shape the future of AI-powered conversation!